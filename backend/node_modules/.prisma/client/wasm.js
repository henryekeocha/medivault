
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  username: 'username',
  password: 'password',
  role: 'role',
  specialty: 'specialty',
  emailVerified: 'emailVerified',
  image: 'image',
  isActive: 'isActive',
  twoFactorEnabled: 'twoFactorEnabled',
  twoFactorSecret: 'twoFactorSecret',
  lastLoginAt: 'lastLoginAt',
  lastLoginIp: 'lastLoginIp',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  backupCodes: 'backupCodes'
};

exports.Prisma.UserSettingsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  emailNotifications: 'emailNotifications',
  pushNotifications: 'pushNotifications',
  messageNotifications: 'messageNotifications',
  shareNotifications: 'shareNotifications',
  theme: 'theme',
  language: 'language',
  timezone: 'timezone',
  highContrast: 'highContrast',
  fontSize: 'fontSize',
  reduceMotion: 'reduceMotion',
  profileVisibility: 'profileVisibility',
  showOnlineStatus: 'showOnlineStatus',
  workingHours: 'workingHours',
  updatedAt: 'updatedAt'
};

exports.Prisma.SystemSettingsScalarFieldEnum = {
  id: 'id',
  maintenanceMode: 'maintenanceMode',
  maintenanceMessage: 'maintenanceMessage',
  allowNewRegistrations: 'allowNewRegistrations',
  maxUploadSize: 'maxUploadSize',
  allowedFileTypes: 'allowedFileTypes',
  defaultStorageQuota: 'defaultStorageQuota',
  smtpConfigured: 'smtpConfigured',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SecurityLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  success: 'success',
  failReason: 'failReason',
  createdAt: 'createdAt'
};

exports.Prisma.ImageScalarFieldEnum = {
  id: 'id',
  filename: 'filename',
  fileType: 'fileType',
  fileSize: 'fileSize',
  uploadDate: 'uploadDate',
  metadata: 'metadata',
  status: 'status',
  type: 'type',
  patientId: 'patientId',
  studyDate: 'studyDate',
  modality: 'modality',
  bodyPart: 'bodyPart',
  diagnosis: 'diagnosis',
  notes: 'notes',
  tags: 'tags',
  processingStarted: 'processingStarted',
  processingEnded: 'processingEnded',
  errorMessage: 'errorMessage',
  lastViewed: 'lastViewed',
  viewCount: 'viewCount',
  userId: 'userId',
  s3Key: 's3Key',
  s3Url: 's3Url'
};

exports.Prisma.MedicalRecordImageScalarFieldEnum = {
  id: 'id',
  medicalRecordId: 'medicalRecordId',
  imageId: 'imageId',
  createdAt: 'createdAt'
};

exports.Prisma.ShareScalarFieldEnum = {
  id: 'id',
  type: 'type',
  permissions: 'permissions',
  shareUrl: 'shareUrl',
  accessKey: 'accessKey',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  lastAccessed: 'lastAccessed',
  accessCount: 'accessCount',
  recipientEmail: 'recipientEmail',
  emailSent: 'emailSent',
  emailSentAt: 'emailSentAt',
  imageId: 'imageId',
  sharedByUserId: 'sharedByUserId',
  sharedWithUserId: 'sharedWithUserId',
  token: 'token'
};

exports.Prisma.AnnotationScalarFieldEnum = {
  id: 'id',
  type: 'type',
  content: 'content',
  coordinates: 'coordinates',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  imageId: 'imageId',
  userId: 'userId'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  content: 'content',
  attachments: 'attachments',
  createdAt: 'createdAt',
  readAt: 'readAt',
  senderId: 'senderId',
  recipientId: 'recipientId'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  type: 'type',
  content: 'content',
  read: 'read',
  metadata: 'metadata',
  createdAt: 'createdAt',
  userId: 'userId'
};

exports.Prisma.PatientProviderScalarFieldEnum = {
  id: 'id',
  status: 'status',
  startDate: 'startDate',
  endDate: 'endDate',
  notes: 'notes',
  patientId: 'patientId',
  doctorId: 'doctorId',
  metadata: 'metadata'
};

exports.Prisma.AppointmentScalarFieldEnum = {
  id: 'id',
  status: 'status',
  notes: 'notes',
  patientId: 'patientId',
  doctorId: 'doctorId',
  imageId: 'imageId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  endTime: 'endTime',
  startTime: 'startTime'
};

exports.Prisma.MedicalRecordScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  providerId: 'providerId',
  recordType: 'recordType',
  title: 'title',
  content: 'content',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.HealthMetricScalarFieldEnum = {
  id: 'id',
  value: 'value',
  unit: 'unit',
  timestamp: 'timestamp',
  notes: 'notes',
  metadata: 'metadata',
  patientId: 'patientId',
  providerId: 'providerId',
  type: 'type'
};

exports.Prisma.PrescriptionScalarFieldEnum = {
  id: 'id',
  medication: 'medication',
  dosage: 'dosage',
  frequency: 'frequency',
  startDate: 'startDate',
  endDate: 'endDate',
  instructions: 'instructions',
  patientId: 'patientId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  notes: 'notes',
  providerId: 'providerId'
};

exports.Prisma.ProviderAnalyticsScalarFieldEnum = {
  id: 'id',
  providerId: 'providerId',
  timestamp: 'timestamp',
  metric: 'metric',
  value: 'value'
};

exports.Prisma.StorageUsageScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  timestamp: 'timestamp',
  bytes: 'bytes'
};

exports.Prisma.SystemLogScalarFieldEnum = {
  id: 'id',
  message: 'message',
  metadata: 'metadata',
  userId: 'userId',
  level: 'level',
  timestamp: 'timestamp'
};

exports.Prisma.UserActivityScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  timestamp: 'timestamp',
  details: 'details',
  type: 'type'
};

exports.Prisma.ChatSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  title: 'title'
};

exports.Prisma.ChatMessageScalarFieldEnum = {
  id: 'id',
  content: 'content',
  createdAt: 'createdAt',
  chatSessionId: 'chatSessionId',
  role: 'role'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  action: 'action',
  userId: 'userId',
  timestamp: 'timestamp',
  details: 'details'
};

exports.Prisma.FileAccessLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  fileId: 'fileId',
  accessType: 'accessType',
  accessTimestamp: 'accessTimestamp',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  metadata: 'metadata'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Role = exports.$Enums.Role = {
  PATIENT: 'PATIENT',
  PROVIDER: 'PROVIDER',
  ADMIN: 'ADMIN'
};

exports.ProviderSpecialty = exports.$Enums.ProviderSpecialty = {
  GENERAL: 'GENERAL',
  RADIOLOGY: 'RADIOLOGY',
  CARDIOLOGY: 'CARDIOLOGY',
  NEUROLOGY: 'NEUROLOGY',
  ORTHOPEDICS: 'ORTHOPEDICS',
  OTHER: 'OTHER'
};

exports.ImageStatus = exports.$Enums.ImageStatus = {
  PROCESSING: 'PROCESSING',
  READY: 'READY',
  ERROR: 'ERROR'
};

exports.ImageType = exports.$Enums.ImageType = {
  XRAY: 'XRAY',
  MRI: 'MRI',
  CT: 'CT',
  ULTRASOUND: 'ULTRASOUND',
  OTHER: 'OTHER'
};

exports.ShareType = exports.$Enums.ShareType = {
  LINK: 'LINK',
  DIRECT: 'DIRECT',
  EMAIL: 'EMAIL'
};

exports.SharePermission = exports.$Enums.SharePermission = {
  VIEW: 'VIEW',
  COMMENT: 'COMMENT',
  EDIT: 'EDIT'
};

exports.AnnotationType = exports.$Enums.AnnotationType = {
  MARKER: 'MARKER',
  MEASUREMENT: 'MEASUREMENT',
  TEXT: 'TEXT',
  DRAWING: 'DRAWING'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  NEW_SHARE: 'NEW_SHARE',
  NEW_MESSAGE: 'NEW_MESSAGE',
  ANNOTATION_ADDED: 'ANNOTATION_ADDED',
  SECURITY_ALERT: 'SECURITY_ALERT',
  SYSTEM_UPDATE: 'SYSTEM_UPDATE',
  UPLOAD_COMPLETE: 'UPLOAD_COMPLETE',
  FILE_SHARED: 'FILE_SHARED',
  FILE_DOWNLOADED: 'FILE_DOWNLOADED',
  FILE_DELETED: 'FILE_DELETED',
  PROCESSING_ERROR: 'PROCESSING_ERROR',
  APPOINTMENT_CREATED: 'APPOINTMENT_CREATED',
  APPOINTMENT_COMPLETED: 'APPOINTMENT_COMPLETED',
  APPOINTMENT_CANCELLED: 'APPOINTMENT_CANCELLED',
  APPOINTMENT_NO_SHOW: 'APPOINTMENT_NO_SHOW'
};

exports.PatientStatus = exports.$Enums.PatientStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  PENDING: 'PENDING'
};

exports.AppointmentStatus = exports.$Enums.AppointmentStatus = {
  SCHEDULED: 'SCHEDULED',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  NO_SHOW: 'NO_SHOW'
};

exports.Prisma.ModelName = {
  User: 'User',
  UserSettings: 'UserSettings',
  SystemSettings: 'SystemSettings',
  SecurityLog: 'SecurityLog',
  Image: 'Image',
  MedicalRecordImage: 'MedicalRecordImage',
  Share: 'Share',
  Annotation: 'Annotation',
  Message: 'Message',
  Notification: 'Notification',
  PatientProvider: 'PatientProvider',
  Appointment: 'Appointment',
  MedicalRecord: 'MedicalRecord',
  HealthMetric: 'HealthMetric',
  Prescription: 'Prescription',
  ProviderAnalytics: 'ProviderAnalytics',
  StorageUsage: 'StorageUsage',
  SystemLog: 'SystemLog',
  UserActivity: 'UserActivity',
  ChatSession: 'ChatSession',
  ChatMessage: 'ChatMessage',
  AuditLog: 'AuditLog',
  FileAccessLog: 'FileAccessLog'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
