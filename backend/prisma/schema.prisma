generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64", "linux-musl-arm64-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                                           String              @id @default(cuid())
  authId                                       String              @unique
  name                                         String
  email                                        String              @unique
  username                                     String?             @unique
  password                                     String?             // Made optional since we're using Clerk
  role                                         Role                @default(PATIENT)
  specialty                                    ProviderSpecialty?
  emailVerified                                DateTime?
  image                                        String?
  isActive                                     Boolean             @default(true)
  lastLoginAt                                  DateTime?
  lastLoginIp                                  String?
  lastActiveAt                                 DateTime?
  createdAt                                    DateTime            @default(now())
  updatedAt                                    DateTime            @updatedAt
  annotations                                  Annotation[]
  appointmentsAsDr                             Appointment[]       @relation("Doctor")
  appointments                                 Appointment[]       @relation("Patient")
  auditLogs                                    AuditLog[]
  chatSessions                                 ChatSession[]
  healthMetrics                                HealthMetric[]
  metricsByProvider                            HealthMetric[]      @relation("MetricProvider")
  images                                       Image[]
  medicalRecords                               MedicalRecord[]
  MedicalRecord_MedicalRecord_providerIdToUser MedicalRecord[]     @relation("MedicalRecord_providerIdToUser")
  receivedMessages                             Message[]           @relation("MessageReceiver")
  sentMessages                                 Message[]           @relation("MessageSender")
  notifications                                Notification[]
  patientsAsDr                                 PatientProvider[]   @relation("Doctor")
  providers                                    PatientProvider[]   @relation("Patient")
  prescriptions                                Prescription[]
  providerAnalytics                            ProviderAnalytics[]
  securityLogs                                 SecurityLog[]
  sharedByMe                                   Share[]             @relation("SharedBy")
  sharedWithMe                                 Share[]             @relation("SharedWith")
  storageUsage                                 StorageUsage[]
  systemLogs                                   SystemLog[]
  activities                                   UserActivity[]
  settings                                     UserSettings?

  @@index([email])
  @@index([username])
  @@index([role])
  @@index([authId])
}

model UserSettings {
  id                   String   @id @default(cuid())
  userId               String
  emailNotifications   Boolean  @default(true)
  pushNotifications    Boolean  @default(true)
  messageNotifications Boolean  @default(true)
  shareNotifications   Boolean  @default(true)
  theme                String   @default("light")
  language             String   @default("en")
  timezone             String   @default("UTC")
  highContrast         Boolean  @default(false)
  fontSize             String   @default("normal")
  reduceMotion         Boolean  @default(false)
  profileVisibility    String   @default("public")
  showOnlineStatus     Boolean  @default(true)
  workingHours         Json?
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id])

  @@unique([userId])
  @@index([userId])
}

model SecurityLog {
  id         String   @id @default(cuid())
  userId     String
  action     String
  ipAddress  String?
  userAgent  String?
  success    Boolean
  failReason String?
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([createdAt])
}

model Image {
  id                String               @id @default(cuid())
  filename          String
  fileType          String
  fileSize          Int
  uploadDate        DateTime             @default(now())
  metadata          Json?
  status            ImageStatus          @default(PROCESSING)
  type              ImageType            @default(OTHER)
  patientId         String?
  studyDate         DateTime?
  modality          String?
  bodyPart          String?
  diagnosis         String?
  notes             String?
  tags              String[]
  processingStarted DateTime?
  processingEnded   DateTime?
  errorMessage      String?
  lastViewed        DateTime?
  viewCount         Int                  @default(0)
  userId            String
  s3Key             String               @unique
  s3Url             String
  annotations       Annotation[]
  appointments      Appointment[]
  user              User                 @relation(fields: [userId], references: [id])
  medicalRecords    MedicalRecordImage[]
  shares            Share[]

  @@index([userId])
  @@index([patientId])
  @@index([uploadDate])
  @@index([type])
  @@index([studyDate])
}

model MedicalRecordImage {
  id              String        @id @default(cuid())
  medicalRecordId String
  imageId         String
  createdAt       DateTime      @default(now())
  image           Image         @relation(fields: [imageId], references: [id])
  medicalRecord   MedicalRecord @relation(fields: [medicalRecordId], references: [id])

  @@unique([medicalRecordId, imageId])
  @@index([medicalRecordId])
  @@index([imageId])
}

model Share {
  id               String          @id @default(cuid())
  type             ShareType       @default(LINK)
  permissions      SharePermission @default(VIEW)
  shareUrl         String?         @unique
  accessKey        String?
  expiresAt        DateTime?
  createdAt        DateTime        @default(now())
  lastAccessed     DateTime?
  accessCount      Int             @default(0)
  recipientEmail   String?
  emailSent        Boolean         @default(false)
  emailSentAt      DateTime?
  imageId          String
  sharedByUserId   String
  sharedWithUserId String?
  token            String?         @unique
  image            Image           @relation(fields: [imageId], references: [id])
  sharedByUser     User            @relation("SharedBy", fields: [sharedByUserId], references: [id])
  sharedWithUser   User?           @relation("SharedWith", fields: [sharedWithUserId], references: [id])

  @@index([imageId])
  @@index([sharedByUserId])
  @@index([sharedWithUserId])
  @@index([shareUrl])
  @@index([token])
  @@index([expiresAt])
}

model Annotation {
  id          String         @id @default(cuid())
  type        AnnotationType
  content     String
  coordinates Json
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  imageId     String
  userId      String
  image       Image          @relation(fields: [imageId], references: [id])
  user        User           @relation(fields: [userId], references: [id])

  @@index([imageId])
  @@index([userId])
}

model Message {
  id          String    @id @default(cuid())
  content     String
  attachments Json?
  createdAt   DateTime  @default(now())
  readAt      DateTime?
  senderId    String
  recipientId String
  recipient   User      @relation("MessageReceiver", fields: [recipientId], references: [id], onDelete: Cascade)
  sender      User      @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([senderId])
  @@index([recipientId])
}

model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  content   String
  read      Boolean          @default(false)
  metadata  Json?
  createdAt DateTime         @default(now())
  userId    String
  user      User             @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([read])
}

model PatientProvider {
  id        String        @id @default(cuid())
  status    PatientStatus @default(ACTIVE)
  startDate DateTime      @default(now())
  endDate   DateTime?
  notes     String?
  patientId String
  doctorId  String
  metadata  Json?
  doctor    User          @relation("Doctor", fields: [doctorId], references: [id])
  patient   User          @relation("Patient", fields: [patientId], references: [id])

  @@unique([patientId, doctorId])
  @@index([patientId])
  @@index([doctorId])
}

model Appointment {
  id        String            @id @default(cuid())
  datetime  DateTime
  status    AppointmentStatus @default(SCHEDULED)
  notes     String?
  patientId String
  doctorId  String
  imageId   String?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  doctor    User              @relation("Doctor", fields: [doctorId], references: [id])
  image     Image?            @relation(fields: [imageId], references: [id])
  patient   User              @relation("Patient", fields: [patientId], references: [id])

  @@index([patientId])
  @@index([doctorId])
}

model MedicalRecord {
  id                                  String               @id @default(cuid())
  patientId                           String
  providerId                          String
  recordType                          String
  title                               String
  content                             String
  createdAt                           DateTime             @default(now())
  updatedAt                           DateTime             @updatedAt
  patient                             User                 @relation(fields: [patientId], references: [id])
  User_MedicalRecord_providerIdToUser User                 @relation("MedicalRecord_providerIdToUser", fields: [providerId], references: [id])
  images                              MedicalRecordImage[]

  @@index([patientId])
  @@index([providerId])
}

model HealthMetric {
  id         String           @id @default(cuid())
  type       HealthMetricType
  value      Float
  unit       String?
  timestamp  DateTime         @default(now())
  notes      String?
  metadata   Json?
  patientId  String
  providerId String?
  patient    User             @relation(fields: [patientId], references: [id])
  provider   User?            @relation("MetricProvider", fields: [providerId], references: [id])

  @@index([patientId])
  @@index([providerId])
  @@index([timestamp])
  @@index([type])
}

model Prescription {
  id           String    @id @default(cuid())
  medication   String
  dosage       String
  frequency    String
  startDate    DateTime
  endDate      DateTime?
  instructions String?
  patientId    String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  patient      User      @relation(fields: [patientId], references: [id])

  @@index([patientId])
}

model ProviderAnalytics {
  id              String   @id @default(cuid())
  providerId      String
  activePatients  Int      @default(0)
  totalPatients   Int      @default(0)
  averageRating   Float?
  responseTime    Float?
  imageReviewTime Float?
  timestamp       DateTime @default(now())
  provider        User     @relation(fields: [providerId], references: [id])

  @@index([providerId])
  @@index([timestamp])
}

model StorageUsage {
  id        String   @id @default(cuid())
  userId    String
  bytesUsed BigInt
  timestamp DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([timestamp])
}

model SystemLog {
  id        String   @id @default(cuid())
  type      String
  message   String
  metadata  Json?
  userId    String?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([createdAt])
  @@index([type])
}

model UserActivity {
  id           String   @id @default(cuid())
  userId       String
  action       String
  resourceType String?
  resourceId   String?
  timestamp    DateTime @default(now())
  metadata     Json?
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([timestamp])
  @@index([action])
}

model ChatSession {
  id          String        @id @default(cuid())
  userId      String
  startedAt   DateTime      @default(now())
  endedAt     DateTime?
  isActive    Boolean       @default(true)
  metadata    Json?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  ChatMessage ChatMessage[]
  user        User          @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([isActive])
}

model ChatMessage {
  id          String            @id @default(cuid())
  sessionId   String
  type        ChatMessageType
  content     String
  status      ChatMessageStatus @default(SENT)
  metadata    Json?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  ChatSession ChatSession       @relation(fields: [sessionId], references: [id])

  @@index([sessionId])
  @@index([status])
  @@index([type])
}

model AuditLog {
  id         String   @id @default(cuid())
  action     String
  userId     String
  resourceId String?
  details    String
  timestamp  DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([timestamp])
  @@index([action])
}

model Analytics {
  id        String   @id @default(cuid())
  type      String
  metric    String
  value     Float
  timestamp DateTime @default(now())
  metadata  Json?

  @@index([timestamp])
  @@index([type])
}

enum Role {
  PATIENT
  PROVIDER
  ADMIN
}

enum ImageStatus {
  PROCESSING
  READY
  ERROR
}

enum ImageType {
  XRAY
  MRI
  CT
  ULTRASOUND
  OTHER
}

enum ShareType {
  LINK
  DIRECT
  EMAIL
}

enum SharePermission {
  VIEW
  COMMENT
  EDIT
}

enum AnnotationType {
  MARKER
  MEASUREMENT
  TEXT
  DRAWING
}

enum NotificationType {
  APPOINTMENT
  MESSAGE
  SHARE
  SYSTEM
}

enum PatientStatus {
  ACTIVE
  INACTIVE
  PENDING
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum ProviderSpecialty {
  GENERAL
  RADIOLOGY
  CARDIOLOGY
  NEUROLOGY
  ORTHOPEDICS
  OTHER
}

enum ChatMessageStatus {
  SENT
  DELIVERED
  READ
  FAILED
}

enum ChatMessageType {
  USER
  BOT
  SYSTEM
}

enum HealthMetricType {
  VITAL_SIGNS
  LAB_RESULTS
  MEDICATION_ADHERENCE
  APPOINTMENT_ATTENDANCE
  IMAGING_FREQUENCY
  PROVIDER_INTERACTION
}
